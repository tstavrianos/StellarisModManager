@page "/"
@using Serilog
@using StellarisModManager.Core

<h1>Stellaris Mod Manager</h1>
<div class="row">
    <div class="col-2">
        <div class="row">
            <div class="btn-group-vertical container-fluid text-nowrap" role="group" aria-label="First group">
                <button type="button" class="btn btn-light text-left" @onclick="@(MoveToTop)"><i class="mdi mdi-chevron-double-up" aria-hidden="true"></i>&nbsp;Top</button>
                <button type="button" class="btn btn-light text-left" @onclick="@(MoveUp)"><i class="mdi mdi-chevron-up" aria-hidden="true"></i>&nbsp;Up</button>
                <button type="button" class="btn btn-light text-left" @onclick="@(MoveDown)"><i class="mdi mdi-chevron-down" aria-hidden="true"></i>&nbsp;Down</button>
                <button type="button" class="btn btn-light text-left" @onclick="@(MoveToBottom)"><i class="mdi mdi-chevron-double-down" aria-hidden="true"></i>&nbsp;Bottom</button>
            </div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="btn-group-vertical container-fluid text-nowrap" role="group" aria-label="Second group">
                <button type="button" class="btn btn-light text-left" @onclick="@(Alpha)"><i class="mdi mdi-sort-alphabetical-ascending" aria-hidden="true"></i>&nbsp;Alphabetical</button>
                <button type="button" class="btn btn-light text-left" @onclick="@(Reverse)"><i class="mdi mdi-sort-descending" aria-hidden="true"></i>&nbsp;Reverse</button>
                <button type="button" class="btn btn-light text-left" @onclick="@(TopologicalSort)"><i class="mdi mdi-sort-bool-ascending" aria-hidden="true"></i>&nbsp;Topological Sort</button>
                <button type="button" class="btn btn-light text-left disabled"><i class="mdi mdi-auto-fix" aria-hidden="true"></i>&nbsp;Load Order Fixer</button>
            </div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="btn-group-vertical container-fluid text-nowrap" role="group" aria-label="Third group">
                <button type="button" class="btn btn-light text-left" @onclick="@(CheckAll)"><i class="mdi mdi-check-box-multiple-outline" aria-hidden="true"></i>&nbsp;All</button>
                <button type="button" class="btn btn-light text-left" @onclick="@(UncheckAll)"><i class="mdi mdi-checkbox-multiple-blank-outline" aria-hidden="true"></i>&nbsp;None</button>
                <button type="button" class="btn btn-light text-left" @onclick="@(InvertChecked)"><i class="mdi mdi-checkbox-multiple-marked" aria-hidden="true"></i>&nbsp;Invert</button>
            </div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="btn-group-vertical container-fluid text-nowrap" role="group" aria-label="fourth group">
                <button type="button" class="btn btn-light text-left" @onclick="@(Save)"><i class="mdi mdi-content-save-outline" aria-hidden="true"></i>&nbsp;Save</button>
            </div>
        </div>
    </div>
    <div class="col-9">
        <table ondragover="event.preventDefault();" class="table table-sm">
            <SpinLoader IsLoading="@(_manager == null)">
                <ContentTemplate>
                    @foreach (var item in _manager.Mods)
                    {
                        if (item != null)
                        {
                            <tr draggable="true" @key="@item.Guid" tabindex="1" class="@(item.IsSelected ? "table-active" : "") @(item.ModData.Valid ? "" : "table-danger")" @onmousedown="@((e) => ItemSelected(e, item))"
                                @ondrop="@(() => Drop(item))" @ondrag="@(() => StartDrag(item))">
                                <td>
                                    @if (item.IsEnabled)
                                    {
                                        <span @onclick="@(() => ItemClick(item))"><i class="mdi mdi-check-box-outline" aria-hidden="true"></i></span>
                                    }
                                    else
                                    {
                                        <span @onclick="@(() => ItemClick(item))"><i class="mdi mdi-checkbox-blank-outline" aria-hidden="true"></i></span>
                                    }
                                    <span>
                                        @item.Name @(item.Loaded ? "" : "(Loading)")
                                        @if (item.Overwrites && !item.IsOverwritten)
                                        {
                                            <span class="badge badge-success"><i class="mdi mdi-plus" aria-hidden="true"></i></span>
                                        }
                                        else if (item.Overwrites && item.IsOverwritten)
                                        {
                                            <span class="badge badge-warning"><i class="mdi mdi-plus-minus" aria-hidden="true"></i></span>
                                        }
                                        else if (!item.Overwrites && item.IsOverwritten)
                                        {
                                            <span class="badge badge-danger"><i class="mdi mdi-minus" aria-hidden="true"></i></span>
                                        }
                                        @if (item.ModData.Tags != null)
                                        {
                                            @foreach (var tag in item.ModData.Tags)
                                            {
                                                <span class="badge badge-info">@tag</span>
                                            }
                                        }
                                        @if (item.Issues.Count > 0)
                                        {
                                            <span class="badge badge-warning" data-toggle="tooltip" title="@item.IssuesHtml">@item.Issues.Count</span>
                                        }
                                    </span>
                                </td>
                            </tr>
                        }
                    }
                </ContentTemplate>
            </SpinLoader>
        </table>
    </div>
</div>

@code
{
    int _currentIndex;

    void TopologicalSort()
    {
        _manager.TopologicalSort();
        StateHasChanged();
    }

    void StartDrag(ModEntry item)
    {
        _currentIndex = GetIndex(item);
        Log.Debug($"DragStart for {item.Guid} index {_currentIndex}");
    }

    void ItemClick(ModEntry item)
    {
        item.IsEnabled = !item.IsEnabled;
        _manager.Validate();
        StateHasChanged();
    }

    void ItemSelected(MouseEventArgs e, ModEntry item)
    {
        if (e.Button != 0) return;
        if (e.CtrlKey)
        {
            item.IsSelected = !item.IsSelected;
        }
        else
        {
            foreach (var i in _manager.Mods)
            {
                i.IsSelected = i.Guid == item.Guid ? true : false;
            }
        }
        StateHasChanged();
    }


    int GetIndex(ModEntry item)
    {
        return _manager.Mods.IndexOf(item);
    }

    void Drop(ModEntry item)
    {
        if (item != null)
        {
            Log.Debug($"Drop item {item.Name} ({item.Guid})");
            var index = GetIndex(item);
            Log.Debug($"Drop index is {index}, move from {_currentIndex}");
            var current = _manager.Mods[_currentIndex];
            _manager.Mods.RemoveAt(_currentIndex);
            _manager.Mods.Insert(index, current);
            _currentIndex = index;
        }
        else
        {
            Log.Debug("Drop - null");
        }
        _manager.Validate();
        StateHasChanged();
    }

    void Alpha()
    {
        _manager.AlphaSort();
        StateHasChanged();
    }

    void Reverse()
    {
        _manager.ReverseOrder();
        StateHasChanged();
    }

    void MoveToTop()
    {
        _manager.MoveToTop();
        StateHasChanged();
    }

    void MoveUp()
    {
        _manager.MoveUp();
        StateHasChanged();
    }

    void MoveDown()
    {
        _manager.MoveDown();
        StateHasChanged();
    }

    void MoveToBottom()
    {
        _manager.MoveToBottom();
        StateHasChanged();
    }

    void CheckAll()
    {
        _manager.CheckAll();
        StateHasChanged();
    }

    void UncheckAll()
    {
        _manager.UncheckAll();
        StateHasChanged();
    }

    void InvertChecked()
    {
        _manager.InvertCheck();
        StateHasChanged();
    }

    void Save()
    {
        _manager.Save();
        StateHasChanged();
    }

    ModManager _manager = new ModManager();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Run(_manager.Load);
            StateHasChanged();
        }
    }

}