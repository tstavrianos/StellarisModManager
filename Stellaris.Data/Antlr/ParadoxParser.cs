//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/usefull/Newfolder/git/StellarisModManager/Stellaris.Data/Grammar\Paradox.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Stellaris.Data.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
public partial class ParadoxParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPERATOR=1, BLOCK_START=2, BLOCK_END=3, INT=4, PCT=5, REAL=6, DATE=7, 
		STRING=8, SYMBOL=9, WHITESPACE=10, LINE_COMMENT=11;
	public const int
		RULE_config = 0, RULE_assignment = 1, RULE_field = 2, RULE_value = 3, 
		RULE_symbol = 4, RULE_string = 5, RULE_integer = 6, RULE_real = 7, RULE_date = 8, 
		RULE_percent = 9, RULE_map = 10, RULE_array = 11;
	public static readonly string[] ruleNames = {
		"config", "assignment", "field", "value", "symbol", "string", "integer", 
		"real", "date", "percent", "map", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPERATOR", "BLOCK_START", "BLOCK_END", "INT", "PCT", "REAL", "DATE", 
		"STRING", "SYMBOL", "WHITESPACE", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Paradox.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ParadoxParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public ParadoxParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

	public ParadoxParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ConfigContext : ParserRuleContext {
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public ConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_config; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParadoxVisitor<TResult> typedVisitor = visitor as IParadoxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigContext config() {
		ConfigContext _localctx = new ConfigContext(Context, State);
		EnterRule(_localctx, 0, RULE_config);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << SYMBOL))) != 0)) {
				{
				{
				State = 24; assignment();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public ITerminalNode OPERATOR() { return GetToken(ParadoxParser.OPERATOR, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParadoxVisitor<TResult> typedVisitor = visitor as IParadoxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 2, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; field();
			State = 31; Match(OPERATOR);
			State = 32; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParadoxVisitor<TResult> typedVisitor = visitor as IParadoxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 4, RULE_field);
		try {
			State = 36;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34; @string();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35; symbol();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public PercentContext percent() {
			return GetRuleContext<PercentContext>(0);
		}
		public RealContext real() {
			return GetRuleContext<RealContext>(0);
		}
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public MapContext map() {
			return GetRuleContext<MapContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParadoxVisitor<TResult> typedVisitor = visitor as IParadoxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_value);
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38; integer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39; percent();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40; real();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 41; date();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 42; @string();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 43; symbol();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 44; map();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 45; array();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(ParadoxParser.STRING, 0); }
		public ITerminalNode INT() { return GetToken(ParadoxParser.INT, 0); }
		public ITerminalNode SYMBOL() { return GetToken(ParadoxParser.SYMBOL, 0); }
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParadoxVisitor<TResult> typedVisitor = visitor as IParadoxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 8, RULE_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << SYMBOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(ParadoxParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParadoxVisitor<TResult> typedVisitor = visitor as IParadoxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 10, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(ParadoxParser.INT, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParadoxVisitor<TResult> typedVisitor = visitor as IParadoxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 12, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealContext : ParserRuleContext {
		public ITerminalNode REAL() { return GetToken(ParadoxParser.REAL, 0); }
		public RealContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterReal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitReal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParadoxVisitor<TResult> typedVisitor = visitor as IParadoxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealContext real() {
		RealContext _localctx = new RealContext(Context, State);
		EnterRule(_localctx, 14, RULE_real);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(REAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public ITerminalNode DATE() { return GetToken(ParadoxParser.DATE, 0); }
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParadoxVisitor<TResult> typedVisitor = visitor as IParadoxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(Context, State);
		EnterRule(_localctx, 16, RULE_date);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(DATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PercentContext : ParserRuleContext {
		public ITerminalNode PCT() { return GetToken(ParadoxParser.PCT, 0); }
		public PercentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_percent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterPercent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitPercent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParadoxVisitor<TResult> typedVisitor = visitor as IParadoxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPercent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PercentContext percent() {
		PercentContext _localctx = new PercentContext(Context, State);
		EnterRule(_localctx, 18, RULE_percent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(PCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapContext : ParserRuleContext {
		public ITerminalNode BLOCK_START() { return GetToken(ParadoxParser.BLOCK_START, 0); }
		public ITerminalNode BLOCK_END() { return GetToken(ParadoxParser.BLOCK_END, 0); }
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterMap(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitMap(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParadoxVisitor<TResult> typedVisitor = visitor as IParadoxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapContext map() {
		MapContext _localctx = new MapContext(Context, State);
		EnterRule(_localctx, 20, RULE_map);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(BLOCK_START);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << SYMBOL))) != 0)) {
				{
				{
				State = 61; assignment();
				}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 67; Match(BLOCK_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode BLOCK_START() { return GetToken(ParadoxParser.BLOCK_START, 0); }
		public ITerminalNode BLOCK_END() { return GetToken(ParadoxParser.BLOCK_END, 0); }
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParadoxVisitor<TResult> typedVisitor = visitor as IParadoxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 22, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(BLOCK_START);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 70; value();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BLOCK_START) | (1L << INT) | (1L << PCT) | (1L << REAL) | (1L << DATE) | (1L << STRING) | (1L << SYMBOL))) != 0) );
			State = 75; Match(BLOCK_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\r', 'P', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x4', 
		'\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\a', '\x2', 
		'\x1C', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x1F', '\v', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\'', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x31', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\x41', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\x44', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x6', '\r', 'J', '\n', '\r', '\r', '\r', '\xE', '\r', 'K', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x2', '\x2', '\xE', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x2', '\x3', 
		'\x4', '\x2', '\x6', '\x6', '\n', '\v', '\x2', 'N', '\x2', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x4', ' ', '\x3', '\x2', '\x2', '\x2', '\x6', '&', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x32', '\x3', '\x2', '\x2', '\x2', '\f', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x36', '\x3', '\x2', '\x2', '\x2', '\x10', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x12', ':', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x16', '>', '\x3', '\x2', '\x2', '\x2', 
		'\x18', 'G', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1C', '\x5', '\x4', 
		'\x3', '\x2', '\x1B', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x5', 
		'\x6', '\x4', '\x2', '!', '\"', '\a', '\x3', '\x2', '\x2', '\"', '#', 
		'\x5', '\b', '\x5', '\x2', '#', '\x5', '\x3', '\x2', '\x2', '\x2', '$', 
		'\'', '\x5', '\f', '\a', '\x2', '%', '\'', '\x5', '\n', '\x6', '\x2', 
		'&', '$', '\x3', '\x2', '\x2', '\x2', '&', '%', '\x3', '\x2', '\x2', '\x2', 
		'\'', '\a', '\x3', '\x2', '\x2', '\x2', '(', '\x31', '\x5', '\xE', '\b', 
		'\x2', ')', '\x31', '\x5', '\x14', '\v', '\x2', '*', '\x31', '\x5', '\x10', 
		'\t', '\x2', '+', '\x31', '\x5', '\x12', '\n', '\x2', ',', '\x31', '\x5', 
		'\f', '\a', '\x2', '-', '\x31', '\x5', '\n', '\x6', '\x2', '.', '\x31', 
		'\x5', '\x16', '\f', '\x2', '/', '\x31', '\x5', '\x18', '\r', '\x2', '\x30', 
		'(', '\x3', '\x2', '\x2', '\x2', '\x30', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '*', '\x3', '\x2', '\x2', '\x2', '\x30', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x30', ',', '\x3', '\x2', '\x2', '\x2', '\x30', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\t', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x33', '\t', '\x2', '\x2', '\x2', '\x33', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x35', '\a', '\n', '\x2', '\x2', '\x35', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\a', '\x6', '\x2', '\x2', '\x37', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', '\b', '\x2', 
		'\x2', '\x39', '\x11', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\t', 
		'\x2', '\x2', ';', '\x13', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', 
		'\a', '\x2', '\x2', '=', '\x15', '\x3', '\x2', '\x2', '\x2', '>', '\x42', 
		'\a', '\x4', '\x2', '\x2', '?', '\x41', '\x5', '\x4', '\x3', '\x2', '@', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x45', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', '\x5', '\x2', 
		'\x2', '\x46', '\x17', '\x3', '\x2', '\x2', '\x2', 'G', 'I', '\a', '\x4', 
		'\x2', '\x2', 'H', 'J', '\x5', '\b', '\x5', '\x2', 'I', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'N', '\a', '\x5', '\x2', '\x2', 'N', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\a', '\x1D', '&', '\x30', '\x42', 'K',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Stellaris.Data.Antlr4
