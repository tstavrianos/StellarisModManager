@page "/"
@using Serilog
@using StellarisModManager.Core

<h1>Stellaris Mod Manager</h1>
<div class="row">
    <div class="col-2">
        <div class="row">
            <div class="btn-group-vertical container-fluid" role="group" aria-label="First group">
                <button type="button" class="btn btn-light text-left" @onclick="@(MoveToTop)"><i class="fas fa-angle-double-up"></i>&nbsp;Top</button>
                <button type="button" class="btn btn-light text-left" @onclick="@(MoveUp)"><i class="fas fa-angle-up"></i>&nbsp;Up</button>
                <button type="button" class="btn btn-light text-left" @onclick="@(MoveDown)"><i class="fas fa-angle-down"></i>&nbsp;Down</button>
                <button type="button" class="btn btn-light text-left" @onclick="@(MoveToBottom)"><i class="fas fa-angle-double-down"></i>&nbsp;Bottom</button>
            </div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="btn-group-vertical container-fluid" role="group" aria-label="Second group">
              <button type="button" class="btn btn-light text-left" @onclick="@(Alpha)"><i class="fas fa-sort-alpha-down"></i>&nbsp;Alphabetical</button>
              <button type="button" class="btn btn-light text-left" @onclick="@(Reverse)"><i class="fas fa-undo-alt"></i>&nbsp;Reverse</button>
            </div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="btn-group-vertical container-fluid" role="group" aria-label="Third group">
                <button type="button" class="btn btn-light text-left" @onclick="@(CheckAll)"><i class="far fa-check-square"></i>&nbsp;All</button>
                <button type="button" class="btn btn-light text-left" @onclick="@(UncheckAll)"><i class="far fa-square"></i>&nbsp;None</button>
                <button type="button" class="btn btn-light text-left" @onclick="@(InvertChecked)"><i class="fas fa-check-square"></i>&nbsp;Invert</button>
            </div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="btn-group-vertical container-fluid" role="group" aria-label="fourth group">
              <button type="button" class="btn btn-light text-left" @onclick="@(Save)"><i class="fas fa-save"></i>&nbsp;Save</button>
            </div>
        </div>
    </div>
    <div class="col-9">
        <ul ondragover="event.preventDefault();" class="list-group">
            @foreach (var item in _manager.Mods)
            {
                if (item != null)
                {
                    <li draggable="true" @key="@item.Guid" tabindex="1" class="list-group-item @(item.IsSelected?"active":"") @(item.ModData.Valid?"":"list-group-item-danger")" @onmousedown="@((e) => ItemSelected(e, item))"
                        @ondrop="@(()=> Drop(item))" @ondrag="@(()=> StartDrag(item))">
                        @if (item.IsEnabled)
                        {
                            <span @onclick="@(() => ItemClick(item))"><i class="far fa-check-square"></i></span>
                        }
                        else
                        {
                            <span @onclick="@(() => ItemClick(item))"><i class="far fa-square"></i></span>
                        }
                        <span>@item.Name
                        @if (item.Issues.Count > 0)
                        {
                            <span class="badge badge-warning" data-toggle="tooltip" title="@item.IssuesHtml">@item.Issues.Count</span>
                        }
                        </span>
                    </li>
                }
                else
                {
                    <li class="list-group-item">NULL??</li>
                }
            }
        </ul>
    </div>
</div>

@code
{

    int _currentIndex;

    void StartDrag(ModEntry item)
    {
        _currentIndex = GetIndex(item);
        Log.Debug($"DragStart for {item.Guid} index {_currentIndex}");
    }

    void ItemClick(ModEntry item)
    {
        item.IsEnabled = !item.IsEnabled;
        _manager.Validate();
        StateHasChanged();
    }

    void ItemSelected(MouseEventArgs e, ModEntry item)
    {
        if (e.Button != 0) return;
        if (e.CtrlKey)
        {
            item.IsSelected = !item.IsSelected;
        }
        else
        {
            foreach (var i in _manager.Mods)
            {
                i.IsSelected = i.Guid == item.Guid ? true : false;
            }
        }
        StateHasChanged();
    }


    int GetIndex(ModEntry item)
    {
        return _manager.Mods.IndexOf(item);
        //return _manager.Mods.FindIndex(a => a.Id == item.Guid);
    }

    void Drop(ModEntry item)
    {
        if (item != null)
        {
            Log.Debug($"Drop item {item.Name} ({item.Guid})");
            var index = GetIndex(item);
            Log.Debug($"Drop index is {index}, move from {_currentIndex}");
            // get current item
            var current = _manager.Mods[_currentIndex];
            // remove mod from current index
            _manager.Mods.RemoveAt(_currentIndex);
            _manager.Mods.Insert(index, current);

            // update current selection
            _currentIndex = index;
        }
        else
        {
            Log.Debug("Drop - null");
        }
        _manager.Validate();
        StateHasChanged();
    }

    void Alpha()
    {
        _manager.AlphaSort();
        StateHasChanged();
    }

    void Reverse()
    {
        _manager.ReverseOrder();
        StateHasChanged();
    }

    void MoveToTop()
    {
        _manager.MoveToTop();
        StateHasChanged();
    }

    void MoveUp()
    {
        _manager.MoveUp();
        StateHasChanged();
    }

    void MoveDown()
    {
        _manager.MoveDown();
        StateHasChanged();
    }

    void MoveToBottom()
    {
        _manager.MoveToBottom();
        StateHasChanged();
    }

    void CheckAll()
    {
        _manager.CheckAll();
        StateHasChanged();
    }

    void UncheckAll()
    {
        _manager.UncheckAll();
        StateHasChanged();
    }

    void InvertChecked()
    {
        _manager.InvertCheck();
        StateHasChanged();
    }

    void Save()
    {
        _manager.Save();
        StateHasChanged();
    }

    readonly ModManager _manager = new ModManager();
}